

__constant uchar aes_sbox[256] =
{
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
    0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
    0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
    0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
    0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
    0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
    0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
    0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
    0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
    0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
    0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB, 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
    0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
    0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08, 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
    0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
    0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
    0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
    0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
};
__constant uchar sbox2[256] =
{
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E,
    0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E,
    0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E,
    0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E,
    0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x7E, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E,
    0x90, 0x92, 0x94, 0x96, 0x98, 0x9A, 0x9C, 0x9E, 0xA0, 0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC, 0xAE,
    0xB0, 0xB2, 0xB4, 0xB6, 0xB8, 0xBA, 0xBC, 0xBE, 0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE,
    0xD0, 0xD2, 0xD4, 0xD6, 0xD8, 0xDA, 0xDC, 0xDE, 0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE,
    0xF0, 0xF2, 0xF4, 0xF6, 0xF8, 0xFA, 0xFC, 0xFE,

    0x1B, 0x19, 0x1F, 0x1D, 0x13, 0x11, 0x17, 0x15,
    0x0B, 0x09, 0x0F, 0x0D, 0x03, 0x01, 0x07, 0x05, 
    0x3B, 0x39, 0x3F, 0x3D, 0x33, 0x31, 0x37, 0x35,
    0x2B, 0x29, 0x2F, 0x2D, 0x23, 0x21, 0x27, 0x25, 
    0x5B, 0x59, 0x5F, 0x5D, 0x53, 0x51, 0x57, 0x55,
    0x4B, 0x49, 0x4F, 0x4D, 0x43, 0x41, 0x47, 0x45, 
    0x7B, 0x79, 0x7F, 0x7D, 0x73, 0x71, 0x77, 0x75,
    0x6B, 0x69, 0x6F, 0x6D, 0x63, 0x61, 0x67, 0x65, 
    0x9B, 0x99, 0x9F, 0x9D, 0x93, 0x91, 0x97, 0x95,
    0x8B, 0x89, 0x8F, 0x8D, 0x83, 0x81, 0x87, 0x85, 
    0xBB, 0xB9, 0xBF, 0xBD, 0xB3, 0xB1, 0xB7, 0xB5,
    0xAB, 0xA9, 0xAF, 0xAD, 0xA3, 0xA1, 0xA7, 0xA5, 
    0xDB, 0xD9, 0xDF, 0xDD, 0xD3, 0xD1, 0xD7, 0xD5,
    0xCB, 0xC9, 0xCF, 0xCD, 0xC3, 0xC1, 0xC7, 0xC5, 
    0xFB, 0xF9, 0xFF, 0xFD, 0xF3, 0xF1, 0xF7, 0xF5,
    0xEB, 0xE9, 0xEF, 0xED, 0xE3, 0xE1, 0xE7, 0xE5,
};
__constant uchar sbox3[256] =
{
    0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09,
    0x18, 0x1B, 0x1E, 0x1D, 0x14, 0x17, 0x12, 0x11, 0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39,
    0x28, 0x2B, 0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21, 0x60, 0x63, 0x66, 0x65, 0x6C, 0x6F, 0x6A, 0x69,
    0x78, 0x7B, 0x7E, 0x7D, 0x74, 0x77, 0x72, 0x71, 0x50, 0x53, 0x56, 0x55, 0x5C, 0x5F, 0x5A, 0x59,
    0x48, 0x4B, 0x4E, 0x4D, 0x44, 0x47, 0x42, 0x41, 0xC0, 0xC3, 0xC6, 0xC5, 0xCC, 0xCF, 0xCA, 0xC9,
    0xD8, 0xDB, 0xDE, 0xDD, 0xD4, 0xD7, 0xD2, 0xD1, 0xF0, 0xF3, 0xF6, 0xF5, 0xFC, 0xFF, 0xFA, 0xF9,
    0xE8, 0xEB, 0xEE, 0xED, 0xE4, 0xE7, 0xE2, 0xE1, 0xA0, 0xA3, 0xA6, 0xA5, 0xAC, 0xAF, 0xAA, 0xA9,
    0xB8, 0xBB, 0xBE, 0xBD, 0xB4, 0xB7, 0xB2, 0xB1, 0x90, 0x93, 0x96, 0x95, 0x9C, 0x9F, 0x9A, 0x99,
    0x88, 0x8B, 0x8E, 0x8D, 0x84, 0x87, 0x82, 0x81, 0x9B, 0x98, 0x9D, 0x9E, 0x97, 0x94, 0x91, 0x92,
    0x83, 0x80, 0x85, 0x86, 0x8F, 0x8C, 0x89, 0x8A, 0xAB, 0xA8, 0xAD, 0xAE, 0xA7, 0xA4, 0xA1, 0xA2,
    0xB3, 0xB0, 0xB5, 0xB6, 0xBF, 0xBC, 0xB9, 0xBA, 0xFB, 0xF8, 0xFD, 0xFE, 0xF7, 0xF4, 0xF1, 0xF2,
    0xE3, 0xE0, 0xE5, 0xE6, 0xEF, 0xEC, 0xE9, 0xEA, 0xCB, 0xC8, 0xCD, 0xCE, 0xC7, 0xC4, 0xC1, 0xC2,
    0xD3, 0xD0, 0xD5, 0xD6, 0xDF, 0xDC, 0xD9, 0xDA, 0x5B, 0x58, 0x5D, 0x5E, 0x57, 0x54, 0x51, 0x52,
    0x43, 0x40, 0x45, 0x46, 0x4F, 0x4C, 0x49, 0x4A, 0x6B, 0x68, 0x6D, 0x6E, 0x67, 0x64, 0x61, 0x62,
    0x73, 0x70, 0x75, 0x76, 0x7F, 0x7C, 0x79, 0x7A, 0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32,
    0x23, 0x20, 0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A, 0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02,
    0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A,
};
__constant uchar pbox_4[10 /* 128 */] =
{
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 
    /* 0x01, 0xDA, 0xC2, 0xCA, 0xD2, 0x01, 0x02, 0xD0, 0x07, 0x88, 0x13, 0x40, 0x1F, 0x10,
    0x27, 0x98, 0x3A, 0x20, 0x4E, 0xA8, 0x61, 0x30, 0x75, 0x97, 0x31, 0xD0, 0x07, 0x05, 0x0F, 0x0C,
    0x0D, 0x03, 0x04, 0x0B, 0x05, 0x0E, 0x06, 0x05, 0x0B, 0x03, 0x04, 0x05, 0x08, 0x07, 0x11, 0x0A,
    0x10, 0x09, 0x0C, 0x00, 0x00, 0xF4, 0xF8, 0xF8, 0xF8, 0xF2, 0xF2, 0xF1, 0xFC, 0x74, 0x78, 0x78,
    0x78, 0x72, 0x72, 0x71, 0x7C, 0xFF, 0xF9, 0xFA, 0x79, 0x7A, 0xFF, 0x01, 0xD0, 0x07, 0x7C, 0x11,
    0x6C, 0x11, 0x0C, 0x13, 0x82, 0x92, 0x9A, 0x91, 0x81, 0x94, 0xFF, 0x93, 0x95, 0xC8, 0x00, 0x00,
    0x00, 0xFF, 0xFF, 0x9A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x48, 0x00, 0x00, 0x00, 0x79, 0x11,
    0x59, 0x11, 0x69, 0x11, 0x7A, 0x11, 0x6A, 0x11, */
};
__constant uchar pbox_0[10][8] =
{
    {0x98, 0xC1, 0xD5, 0x8B, 0xA6, 0xBE, 0x69, 0xBB},
    {0x65, 0x33, 0xA6, 0x2D, 0x5F, 0x48, 0x9C, 0xE9},
    {0x99, 0x5A, 0x74, 0x58, 0xA3, 0x39, 0x4C, 0x6B},
    {0x65, 0x33, 0xA6, 0x2D, 0x5F, 0x48, 0x9C, 0xE9},
    {0x98, 0xC1, 0xD5, 0x8B, 0xA6, 0xBE, 0x69, 0xBB},
    {0x99, 0x5A, 0x74, 0x58, 0xA3, 0x39, 0x4C, 0x6B},
    {0x99, 0x5A, 0x74, 0x58, 0xA3, 0x39, 0x4C, 0x6B},
    {0x98, 0xC1, 0xD5, 0x8B, 0xA6, 0xBE, 0x69, 0xBB},
    {0x65 ,0x33, 0xA6, 0x2D, 0x5F, 0x48, 0x9C, 0xE9},
    {0x99, 0x5A, 0x74, 0x58, 0xA3, 0x39, 0x4C, 0x6B}
};

__constant uchar sbox_oe[2][256] = {
{
    0x66,0x68,0x6B,0x65,0x6D,0x6F,0x63,0x6C,
    0x69,0x6E,0x60,0x64,0x6A,0x67,0x62,0x61,
    0x86,0x88,0x8B,0x85,0x8D,0x8F,0x83,0x8C,
    0x89,0x8E,0x80,0x84,0x8A,0x87,0x82,0x81,
    0xB6,0xB8,0xBB,0xB5,0xBD,0xBF,0xB3,0xBC,
    0xB9,0xBE,0xB0,0xB4,0xBA,0xB7,0xB2,0xB1,
    0x56,0x58,0x5B,0x55,0x5D,0x5F,0x53,0x5C,
    0x59,0x5E,0x50,0x54,0x5A,0x57,0x52,0x51,
    0xD6,0xD8,0xDB,0xD5,0xDD,0xDF,0xD3,0xDC,
    0xD9,0xDE,0xD0,0xD4,0xDA,0xD7,0xD2,0xD1,
    0xF6,0xF8,0xFB,0xF5,0xFD,0xFF,0xF3,0xFC,
    0xF9,0xFE,0xF0,0xF4,0xFA,0xF7,0xF2,0xF1,
    0x36,0x38,0x3B,0x35,0x3D,0x3F,0x33,0x3C,
    0x39,0x3E,0x30,0x34,0x3A,0x37,0x32,0x31,
    0xC6,0xC8,0xCB,0xC5,0xCD,0xCF,0xC3,0xCC,
    0xC9,0xCE,0xC0,0xC4,0xCA,0xC7,0xC2,0xC1,
    0x96,0x98,0x9B,0x95,0x9D,0x9F,0x93,0x9C,
    0x99,0x9E,0x90,0x94,0x9A,0x97,0x92,0x91,
    0xE6,0xE8,0xEB,0xE5,0xED,0xEF,0xE3,0xEC,
    0xE9,0xEE,0xE0,0xE4,0xEA,0xE7,0xE2,0xE1,
    0x06,0x08,0x0B,0x05,0x0D,0x0F,0x03,0x0C,
    0x09,0x0E,0x00,0x04,0x0A,0x07,0x02,0x01,
    0x46,0x48,0x4B,0x45,0x4D,0x4F,0x43,0x4C,
    0x49,0x4E,0x40,0x44,0x4A,0x47,0x42,0x41,
    0xA6,0xA8,0xAB,0xA5,0xAD,0xAF,0xA3,0xAC,
    0xA9,0xAE,0xA0,0xA4,0xAA,0xA7,0xA2,0xA1,
    0x76,0x78,0x7B,0x75,0x7D,0x7F,0x73,0x7C,
    0x79,0x7E,0x70,0x74,0x7A,0x77,0x72,0x71,
    0x26,0x28,0x2B,0x25,0x2D,0x2F,0x23,0x2C,
    0x29,0x2E,0x20,0x24,0x2A,0x27,0x22,0x21,
    0x16,0x18,0x1B,0x15,0x1D,0x1F,0x13,0x1C,
    0x19,0x1E,0x10,0x14,0x1A,0x17,0x12,0x11,
},
{
    0x66,0x86,0xB6,0x56,0xD6,0xF6,0x36,0xC6,
    0x96,0xE6,0x06,0x46,0xA6,0x76,0x26,0x16,
    0x68,0x88,0xB8,0x58,0xD8,0xF8,0x38,0xC8,
    0x98,0xE8,0x08,0x48,0xA8,0x78,0x28,0x18,
    0x6B,0x8B,0xBB,0x5B,0xDB,0xFB,0x3B,0xCB,
    0x9B,0xEB,0x0B,0x4B,0xAB,0x7B,0x2B,0x1B,
    0x65,0x85,0xB5,0x55,0xD5,0xF5,0x35,0xC5,
    0x95,0xE5,0x05,0x45,0xA5,0x75,0x25,0x15,
    0x6D,0x8D,0xBD,0x5D,0xDD,0xFD,0x3D,0xCD,
    0x9D,0xED,0x0D,0x4D,0xAD,0x7D,0x2D,0x1D,
    0x6F,0x8F,0xBF,0x5F,0xDF,0xFF,0x3F,0xCF,
    0x9F,0xEF,0x0F,0x4F,0xAF,0x7F,0x2F,0x1F,
    0x63,0x83,0xB3,0x53,0xD3,0xF3,0x33,0xC3,
    0x93,0xE3,0x03,0x43,0xA3,0x73,0x23,0x13,
    0x6C,0x8C,0xBC,0x5C,0xDC,0xFC,0x3C,0xCC,
    0x9C,0xEC,0x0C,0x4C,0xAC,0x7C,0x2C,0x1C,
    0x69,0x89,0xB9,0x59,0xD9,0xF9,0x39,0xC9,
    0x99,0xE9,0x09,0x49,0xA9,0x79,0x29,0x19,
    0x6E,0x8E,0xBE,0x5E,0xDE,0xFE,0x3E,0xCE,
    0x9E,0xEE,0x0E,0x4E,0xAE,0x7E,0x2E,0x1E,
    0x60,0x80,0xB0,0x50,0xD0,0xF0,0x30,0xC0,
    0x90,0xE0,0x00,0x40,0xA0,0x70,0x20,0x10,
    0x64,0x84,0xB4,0x54,0xD4,0xF4,0x34,0xC4,
    0x94,0xE4,0x04,0x44,0xA4,0x74,0x24,0x14,
    0x6A,0x8A,0xBA,0x5A,0xDA,0xFA,0x3A,0xCA,
    0x9A,0xEA,0x0A,0x4A,0xAA,0x7A,0x2A,0x1A,
    0x67,0x87,0xB7,0x57,0xD7,0xF7,0x37,0xC7,
    0x97,0xE7,0x07,0x47,0xA7,0x77,0x27,0x17,
    0x62,0x82,0xB2,0x52,0xD2,0xF2,0x32,0xC2,
    0x92,0xE2,0x02,0x42,0xA2,0x72,0x22,0x12,
    0x61,0x81,0xB1,0x51,0xD1,0xF1,0x31,0xC1,
    0x91,0xE1,0x01,0x41,0xA1,0x71,0x21,0x11,
}
};

//__constant uchar cha[6] = { 0x7F, 0x77, 0x3B, 0xE2, 0x90, 0x9B};
__constant uchar cha16[16] = { 0x3B, 0xE2, 0x90, 0x9B, 0x7F, 0x77, 0x3B, 0xE2, 0x90, 0x9B, 0x7F, 0x77, 0x3B, 0xE2, 0x90, 0x9B };

// 10-rounds loop to init the key
__kernel void init_a(__global uchar* RES, __global ulong* polyoffset)
{
    const int l_size = 16;
    // Get the index of the current element
    long poly = get_global_id(0);
    uchar tmpB;
    uchar A[16]; 
    //uchar B[16];
    uchar C[16];
    uchar D[16];
    uchar E[16];
    // Init Function

    long tmpPoly = poly+ *polyoffset; // offset + [0, 0x80000];
    A[0] = (tmpPoly >> 0) & 0xFF;
    A[1] = (tmpPoly >> 8) & 0xFF;
    A[2] = (tmpPoly >> 16) & 0xFF;
    A[3] = (tmpPoly >> 24) & 0xFF;
    A[4] = (tmpPoly >> 32) & 0xFF;
    A[5] = (tmpPoly >> 40) & 0xFF;
    A[6] = (tmpPoly >> 32) & 0xFF;
    A[7] = (tmpPoly >> 40) & 0xFF;

    A[8] = (tmpPoly >> 0) & 0xFF;
    A[9] = (tmpPoly >> 8) & 0xFF;
    A[0xA] = (tmpPoly >> 16) & 0xFF;
    A[0xB] = (tmpPoly >> 24) & 0xFF;
    A[0xC] = (tmpPoly >> 32) & 0xFF;
    A[0xD] = (tmpPoly >> 40) & 0xFF;
    A[0xE] = (tmpPoly >> 32) & 0xFF;
    A[0xF] = (tmpPoly >> 40) & 0xFF;

    for (int pbox0_idx = 0; pbox0_idx < 10; ++pbox0_idx)
    {
        D[0] = sbox_oe[pbox0_idx & 0x1][ pbox_0[pbox0_idx][0] ^ A[0 + 8] ];
        D[1] = sbox_oe[pbox0_idx & 0x1][ pbox_0[pbox0_idx][1] ^ A[1 + 8] ];
        D[2] = sbox_oe[pbox0_idx & 0x1][ pbox_0[pbox0_idx][2] ^ A[2 + 8] ];
        D[3] = sbox_oe[pbox0_idx & 0x1][ pbox_0[pbox0_idx][3] ^ A[3 + 8] ];
        D[4] = sbox_oe[pbox0_idx & 0x1][ pbox_0[pbox0_idx][4] ^ A[4 + 8] ];
        D[5] = sbox_oe[pbox0_idx & 0x1][ pbox_0[pbox0_idx][5] ^ A[5 + 8] ];
        D[6] = sbox_oe[pbox0_idx & 0x1][ pbox_0[pbox0_idx][6] ^ A[6 + 8] ];
        D[7] = sbox_oe[pbox0_idx & 0x1][ pbox_0[pbox0_idx][7] ^ A[7 + 8] ];

        E[0] = D[6] ^ D[5] ^ D[2] ^ D[1] ^ D[3] ^ D[4];
        E[1] = D[1] ^ D[4] ^ D[5] ^ D[6] ^ D[7];
        E[2] = D[0] ^ D[3] ^ D[4];
        E[3] = D[7] ^ D[6] ^ D[2] ^ D[1] ^ D[3] ^ D[4];
        E[4] = D[2] ^ D[1] ^ D[0] ^ D[5];
        E[5] = D[0] ^ D[3] ^ D[6];
        E[6] = D[3] ^ D[7] ^ D[2] ^ D[1] ^ D[0];
        E[7] = D[4] ^ D[2] ^ D[5] ^ D[7];

        //temp = E[0] ^ A[0]; A[0] = A[0 + 8]; A[0 + 8] = temp;
        D[0] = E[0] ^ A[0];
        D[1] = E[1] ^ A[1];
        D[2] = E[2] ^ A[2];
        D[3] = E[3] ^ A[3];
        D[4] = E[4] ^ A[4];
        D[5] = E[5] ^ A[5];
        D[6] = E[6] ^ A[6];
        D[7] = E[7] ^ A[7];

        A[0] = A[8];
        A[1] = A[9];
        A[2] = A[0xA];
        A[3] = A[0xB];
        A[4] = A[0xC];
        A[5] = A[0xD];
        A[6] = A[0xE];
        A[7] = A[0xF];

        A[0 + 8] = D[0];
        A[1 + 8] = D[1];
        A[2 + 8] = D[2];
        A[3 + 8] = D[3];
        A[4 + 8] = D[4];
        A[5 + 8] = D[5];
        A[6 + 8] = D[6];
        A[7 + 8] = D[7];
    }
    //

    //loop_2610(challenge);
    C[0x0] = cha16[0x0] ^ A[0x0];
    C[0x1] = cha16[0x1] ^ A[0x1];
    C[0x2] = cha16[0x2] ^ A[0x2];
    C[0x3] = cha16[0x3] ^ A[0x3];
    C[0x4] = cha16[0x4] ^ A[0x4];
    C[0x5] = cha16[0x5] ^ A[0x5];
    C[0x6] = cha16[0x6] ^ A[0x6];
    C[0x7] = cha16[0x7] ^ A[0x7];
    C[0x8] = cha16[0x8] ^ A[0x8];
    C[0x9] = cha16[0x9] ^ A[0x9];
    C[0xA] = cha16[0xA] ^ A[0xA];
    C[0xB] = cha16[0xB] ^ A[0xB];
    C[0xC] = cha16[0xC] ^ A[0xC];
    C[0xD] = cha16[0xD] ^ A[0xD];
    C[0xE] = cha16[0xE] ^ A[0xE];
    C[0xF] = cha16[0xF] ^ A[0xF];

    //bloc_part2();

    //main_loop_2_2655E();
    for (int pbox4_idx = 0; pbox4_idx != 0x09; ++pbox4_idx)
    {
        //sub_2401();
        //update reg B
        tmpB = aes_sbox[A[0xC]];                      A[0x3] = A[0x3] ^ tmpB;
        tmpB = aes_sbox[A[0xF]];                      A[0x2] = A[0x2] ^ tmpB;
        tmpB = aes_sbox[A[0xE]];                      A[0x1] = A[0x1] ^ tmpB;
        tmpB = pbox_4[pbox4_idx] ^ aes_sbox[A[0xD]];  A[0x0] = A[0x0] ^ tmpB;

        A[0x4] = A[0x0] ^ A[0x4];
        A[0x5] = A[0x1] ^ A[0x5];
        A[0x6] = A[0x2] ^ A[0x6];
        A[0x7] = A[0x3] ^ A[0x7];

        A[0x8] = A[0x8] ^ A[0x4];
        A[0x9] = A[0x9] ^ A[0x5];
        A[0xA] = A[0xA] ^ A[0x6];
        A[0xB] = A[0xB] ^ A[0x7];

        A[0xC] = A[0xC] ^ A[0x8];
        A[0xD] = A[0xD] ^ A[0x9];
        A[0xE] = A[0xE] ^ A[0xA];
        A[0xF] = A[0xF] ^ A[0xB];


        //sub_2440();
        D[0x0] = aes_sbox[C[0x0]];
        D[0x1] = aes_sbox[C[0x5]];
        D[0x2] = aes_sbox[C[0xA]];
        D[0x3] = aes_sbox[C[0xF]];
        D[0x4] = aes_sbox[C[0x4]];
        D[0x5] = aes_sbox[C[0x9]];
        D[0x6] = aes_sbox[C[0xE]];
        D[0x7] = aes_sbox[C[0x3]];
        D[0x8] = aes_sbox[C[0x8]];
        D[0x9] = aes_sbox[C[0xD]];
        D[0xA] = aes_sbox[C[0x2]];
        D[0xB] = aes_sbox[C[0x7]];
        D[0xC] = aes_sbox[C[0xC]];
        D[0xD] = aes_sbox[C[0x1]];
        D[0xE] = aes_sbox[C[0x6]];
        D[0xF] = aes_sbox[C[0xB]];

        //for(UInt8 loop=0; loop != 0x10; loop +=4) {
        E[0 + 0] = D[3 + 0] ^ D[2 + 0] ^ sbox2[D[0 + 0]] ^ sbox3[D[1 + 0]];
        E[0 + 1] = D[0 + 0] ^ D[3 + 0] ^ sbox2[D[1 + 0]] ^ sbox3[D[2 + 0]];
        E[0 + 2] = D[1 + 0] ^ D[0 + 0] ^ sbox2[D[2 + 0]] ^ sbox3[D[3 + 0]];
        E[0 + 3] = D[2 + 0] ^ D[1 + 0] ^ sbox2[D[3 + 0]] ^ sbox3[D[0 + 0]];

        E[4 + 0] = D[3 + 4] ^ D[2 + 4] ^ sbox2[D[0 + 4]] ^ sbox3[D[1 + 4]];
        E[4 + 1] = D[0 + 4] ^ D[3 + 4] ^ sbox2[D[1 + 4]] ^ sbox3[D[2 + 4]];
        E[4 + 2] = D[1 + 4] ^ D[0 + 4] ^ sbox2[D[2 + 4]] ^ sbox3[D[3 + 4]];
        E[4 + 3] = D[2 + 4] ^ D[1 + 4] ^ sbox2[D[3 + 4]] ^ sbox3[D[0 + 4]];

        E[8 + 0] = D[3 + 8] ^ D[2 + 8] ^ sbox2[D[0 + 8]] ^ sbox3[D[1 + 8]];
        E[8 + 1] = D[0 + 8] ^ D[3 + 8] ^ sbox2[D[1 + 8]] ^ sbox3[D[2 + 8]];
        E[8 + 2] = D[1 + 8] ^ D[0 + 8] ^ sbox2[D[2 + 8]] ^ sbox3[D[3 + 8]];
        E[8 + 3] = D[2 + 8] ^ D[1 + 8] ^ sbox2[D[3 + 8]] ^ sbox3[D[0 + 8]];

        E[0xC + 0] = D[3 + 0xC] ^ D[2 + 0xC] ^ sbox2[D[0 + 0xC]] ^ sbox3[D[1 + 0xC]];
        E[0xC + 1] = D[0 + 0xC] ^ D[3 + 0xC] ^ sbox2[D[1 + 0xC]] ^ sbox3[D[2 + 0xC]];
        E[0xC + 2] = D[1 + 0xC] ^ D[0 + 0xC] ^ sbox2[D[2 + 0xC]] ^ sbox3[D[3 + 0xC]];
        E[0xC + 3] = D[2 + 0xC] ^ D[1 + 0xC] ^ sbox2[D[3 + 0xC]] ^ sbox3[D[0 + 0xC]];
        //}

        //sub_26A7
        //sub_24DB
        C[0] = E[0] ^ A[0];
        C[1] = E[1] ^ A[1];
        C[2] = E[2] ^ A[2];
        C[3] = E[3] ^ A[3];

        C[4] = E[4] ^ A[4 + 0];
        C[5] = E[5] ^ A[4 + 1];
        C[6] = E[6] ^ A[4 + 2];
        C[7] = E[7] ^ A[4 + 3];

        C[8] = E[8] ^ A[8 + 0];
        C[9] = E[9] ^ A[8 + 1];
        C[0xA] = E[0xA] ^ A[8 + 2];
        C[0xB] = E[0xB] ^ A[8 + 3];

        C[0xC] = E[0xC] ^ A[0xC];
        C[0xD] = E[0xD] ^ A[0xD];
        C[0xE] = E[0xE] ^ A[0xE];
        C[0xF] = E[0xF] ^ A[0xF];
        //end_sub_24DB
        //end_sub_26A7
    }

    //loc_26B1();
    //sub_2401();

    tmpB = aes_sbox[A[0xC]];                      A[0x3] = A[0x3] ^ tmpB;
    tmpB = aes_sbox[A[0xF]];                      A[0x2] = A[0x2] ^ tmpB;
    tmpB = aes_sbox[A[0xE]];                      A[0x1] = A[0x1] ^ tmpB;
    tmpB = pbox_4[0x9] ^ aes_sbox[A[0xD]];        A[0x0] = A[0x0] ^ tmpB;

    A[0x7] = A[0x3] ^ A[0x7];
    A[0x6] = A[0x2] ^ A[0x6];
    A[0x5] = A[0x1] ^ A[0x5];
    A[0x4] = A[0x0] ^ A[0x4];
    A[0xB] = A[0xB] ^ A[0x7];
    A[0xA] = A[0xA] ^ A[0x6];
    A[0x9] = A[0x9] ^ A[0x5];
    A[0x8] = A[0x8] ^ A[0x4];
    A[0xF] = A[0xF] ^ A[0xB];
    A[0xE] = A[0xE] ^ A[0xA];
    A[0xD] = A[0xD] ^ A[0x9];
    A[0xC] = A[0xC] ^ A[0x8];

    E[0x0] = aes_sbox[C[0x0]];
    E[0x1] = aes_sbox[C[0x5]];
    E[0x2] = aes_sbox[C[0xA]];
    E[0x3] = aes_sbox[C[0xF]];
    E[0x4] = aes_sbox[C[0x4]];
    E[0x5] = aes_sbox[C[0x9]];
    E[0x6] = aes_sbox[C[0xE]];
    E[0x7] = aes_sbox[C[0x3]];
    E[0x8] = aes_sbox[C[0x8]];
    E[0x9] = aes_sbox[C[0xD]];
    E[0xA] = aes_sbox[C[0x2]];
    E[0xB] = aes_sbox[C[0x7]];
    E[0xC] = aes_sbox[C[0xC]];
    E[0xD] = aes_sbox[C[0x1]];
    E[0xE] = aes_sbox[C[0x6]];
    E[0xF] = aes_sbox[C[0xB]];

    //sub_24DB();        
    RES[poly * l_size + 0] = E[0] ^ A[0x0];
    RES[poly * l_size + 1] = E[1] ^ A[0x1];
    RES[poly * l_size + 2] = E[2] ^ A[0x2];
    RES[poly * l_size + 3] = E[3] ^ A[0x3];

    RES[poly * l_size + 4] = E[4] ^ A[0x4];
    RES[poly * l_size + 5] = E[5] ^ A[0x5];
    RES[poly * l_size + 6] = E[6] ^ A[0x6];
    RES[poly * l_size + 7] = E[7] ^ A[0x7];

    RES[poly * l_size + 8] = E[8] ^ A[0x8];
    RES[poly * l_size + 9] = E[9] ^ A[0x9];
    RES[poly * l_size + 0xA] = E[0xA] ^ A[0xA];
    RES[poly * l_size + 0xB] = E[0xB] ^ A[0xB];

    RES[poly * l_size + 0xC] = E[0xC] ^ A[0xC];
    RES[poly * l_size + 0xD] = E[0xD] ^ A[0xD];
    RES[poly * l_size + 0xE] = E[0xE] ^ A[0xE];
    RES[poly * l_size + 0xF] = E[0xF] ^ A[0xF];
    //end sub_24DB();
    //end loc_26B1();
}
